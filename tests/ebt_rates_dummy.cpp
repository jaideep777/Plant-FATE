#include <vector>
#include <iostream>
#include <cmath>
#include "solver.h"
using namespace std;

#include "test_model_2_ms.h"

int main(){

	TestModel M;
	Species<TestModel> spp(M);
	Environment E;

	Solver S(SOLVER_EBT);
	S.setEnvironment(&E);
	S.addSpecies({25}, {0}, {1}, {false}, &spp, 4, -1);
	// S.resetState();
	// S.initialize();
	static_cast<Species<TestModel>*>(S.species_vec[0])->sortCohortsDescending(0,1);
	S.print();
	
	E.computeEnv(0, &S, S.state.begin(), S.rates.begin());
	cout << E.evalEnv(0,0) << endl;
	if (fabs(E.evalEnv(0,0) - 0.3802) > 1e-5) return 1;

	S.calcRates_EBT(1, S.state.begin(), S.rates.begin());  // dummy rates calc rates(X=X0, U=U0, t=1, E=E(U0))
//	S.step_to(1);

//	vector <double> rates_exp = {
//		  0.0000000000,  0.2476464257,  0.2468536400,  0.2452680687,  0.2428897117,  0.2397185690,
//		  0.2357546406,  0.2309979265,  0.2254484268,  0.2191061414,  0.2119710703,  0.2040432135,
//		  0.1953225711,  0.1858091429,  0.1755029292,  0.1644039297,  0.1525121445,  0.1398275737,
//		  0.1263502172,  0.1120800750,  0.0970171472,  0.0811614336,  0.0645129344,  0.0470716495,
//		  0.0288375790,  0.0098107227,  0.4965383762, -0.1107483437, -0.0910785784, -0.0751940748,
//		 -0.0622860653, -0.0517365749, -0.0430692323, -0.0359138025, -0.0299803350, -0.0250401308,
//		 -0.0209115967, -0.0174496398, -0.0145376493, -0.0120813876, -0.0100043021, -0.0082439015,
//		 -0.0067489372, -0.0054771977, -0.0043937710, -0.0034696703, -0.0026807389, -0.0020067756,
//		 -0.0014308302, -0.0009386365, -0.0005181508, -0.0001591773
//	    };
	// NOTE: These rates are with bfin = -1
	vector <double> rates_exp = {
		0.0098107227,-0.0001591773,
		0.028837579,-0.0005181508,
		0.0470716495,-0.0009386365,
		0.0645129344,-0.0014308302,
		0.0811614336,-0.0020067756,
		0.0970171472,-0.0026807389,
		0.112080075,-0.0034696703,
		0.1263502172,-0.004393771,
		0.1398275737,-0.0054771977,
		0.1525121445,-0.0067489372,
		0.1644039297,-0.0082439015,
		0.1755029292,-0.0100043021,
		0.1858091429,-0.0120813876,
		0.1953225711,-0.0145376493,
		0.2040432135,-0.0174496398,
		0.2119710703,-0.0209115967,
		0.2191061414,-0.0250401308,
		0.2254484268,-0.029980335,
		0.2309979265,-0.0359138025,
		0.2357546406,-0.0430692323,
		0.239718569,-0.0517365749,
		0.2428897117,-0.0622860653,
		0.2452680687,-0.0751940748,
		0.24685364,-0.0910785784,
		0.2476464257,-0.1107483437,
		0,0.4965383762,
		-2, 0, -19.6, -29.4,
		-2, 0, -18.8, -28.2,
		-2, 0, -18, -27,
		-2, 0, -17.2, -25.8,
		-2, 0, -16.4, -24.6,
		-2, 0, -15.6, -23.4,
		-2, 0, -14.8, -22.2,
		-2, 0, -14, -21,
		-2, 0, -13.2, -19.8,
		-2, 0, -12.4, -18.6,
		-2, 0, -11.6, -17.4,
		-2, 0, -10.8, -16.2,
		-2, 0, -10, -15,
		-2, 0, -9.2, -13.8,
		-2, 0, -8.4, -12.6,
		-2, 0, -7.6, -11.4,
		-2, 0, -6.8, -10.2,
		-2, 0, -6, -9,
		-2, 0, -5.2, -7.8,
		-2, 0, -4.4, -6.6,
		-2, 0, -3.6, -5.4,
		-2, 0, -2.8, -4.2,
		-2, 0, -2, -3,
		-2, 0, -1.2, -1.8,
		-2, 0, -0.4, -0.6,
		-2, 0, 0, 0
	};
		//std::cout << "HERE" << std::endl;

	for (int i=0; i< S.rates.size(); ++i){
		//cout << S.rates[i] << " " << rates_exp[i] << endl;
		if ( fabs(S.rates[i] - rates_exp[i]) > 1e-5) return 1;
	}
	
	return 0;
	
}

