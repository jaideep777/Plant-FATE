CXX_STD = CXX17

ROOT_DIR = ../..
PHYDRO_PATH = $(ROOT_DIR)/phydro
LIBPSPM_PATH = $(ROOT_DIR)/libpspm
FLARE_PATH = $(ROOT_DIR)/Flare.v2

# include and lib dirs (esp for cuda)
INC_PATH :=  -I../inst/include -I../src -I$(PHYDRO_PATH)/inst/include -I$(LIBPSPM_PATH)/include -I$(FLARE_PATH)/include #-isystem "$(PHYDRO_PATH)"/inst/LBFGSpp/include

# flags
PKG_CXXFLAGS = -O3 -fPIC -std=c++17 -Wall -Wextra -DPHYDRO_ANALYTICAL_ONLY 

PKG_CXXFLAGS += -Wno-sign-compare -Wno-unused-variable \
-Wno-unused-but-set-variable -Wno-float-conversion \
-Wno-unused-parameter -Wno-cast-function-type

PKG_CPPFLAGS = $(INC_PATH)

# Need libstdc++fs for using std::filesystem
PKG_LIBS = -L"$(LIBPSPM_PATH)"/lib -lpspm -lstdc++fs

# SOURCES = $(wildcard src/*.cpp)

SOURCES = traits_params.cpp \
          plant_architecture.cpp \
          assimilation.cpp \
          plant.cpp \
          light_environment.cpp \
          climate.cpp \
          climate_stream.cpp \
          pspm_interface.cpp \
          community_properties.cpp \
          state_restore.cpp \
          life_history.cpp \
          plantfate_patch.cpp \
          r_interface.cpp

# Obtain the object files
OBJECTS=$(SOURCES:.cpp=.o) 

.PHONY: all libpspm

# Make the shared object
all: $(SHLIB)

$(SHLIB): libpspm

# To compile libpspm, pass down g++ and ar from here, and clear profiling flags (as they are not supported on windows)
libpspm:
	(cd $(LIBPSPM_PATH) && $(MAKE) CXX=$(CXX17) AR=$(AR) PROFILING_FLAGS="")

# Provide recipe to remove all objects
clean:
	@rm -f $(OBJECTS)
	(cd $(LIBPSPM_PATH) && $(MAKE) clean)
	
