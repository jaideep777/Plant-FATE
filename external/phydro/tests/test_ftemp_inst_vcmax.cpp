#include <iostream>
#include <iomanip>
#include <fstream>
#include "phydro.h"
using namespace std;


double err(double x, double ref){
	return std::min(abs(x-ref), abs(x/ref-1));
}

int check(double x, double ref, double err=1e-6){
	//cout << "err: " << abs(x-ref) << " " << abs(x/ref-1)<< "\n";
	//cout << "comp: " << x << " " << ref << "|" << abs(x-ref) << "\n";
	if (abs(x-ref) < err || abs(x/ref-1) < err) return 0;
	else return 1;
}


vector<double> seq(double start, double end, int length){
	vector<double> x;
	for (int i=0; i<length; ++i) x.push_back(start + double(i)*(end-start)/(length-1));
	return x;
}

vector<double> lseq(double start, double end, int length){
	vector<double> x;
	for (int i=0; i<length; ++i) x.push_back(exp(log(start) + double(i)*(log(end)-log(start))/(length-1)));
	return x;
}

int main(){
	vector<double> x = seq(-5,40,46);
	// ftemp_inst_vcmax
	vector<double> expected_kthunge = {0.0409929456427702, 0.0461493894412967, 0.0519088879632079, 0.0583365303432027, 0.0655038255843928, 0.0734892722322557, 0.082378971749221, 0.0922672878868424, 0.103257554145232, 0.115462831033827, 0.129006714225733, 0.144024193718482, 0.160662562618367, 0.179082371928452, 0.199458424423425, 0.221980795889541, 0.246855865066752, 0.274307323677001, 0.30457712374384, 0.337926299334205, 0.374635571605814, 0.415005606551701, 0.459356740013936, 0.508027909069659, 0.56137442602593, 0.619764092780678, 0.6835709698514, 0.753165876484036, 0.828902398836447, 0.911096822485959, 1, 1.0957587624194, 1.1983641899216, 1.30758406786421, 1.42287750129756, 1.54329144989301, 1.66734255694496, 1.79289382675272, 1.91704493246013, 2.03606674070149, 2.14542256035448, 2.23992517156747, 2.31407134986504, 2.3625655138052, 2.3809885800543, 2.36649880193464};

	for (size_t i=0; i<x.size(); ++i){
		double T = x[i];
		double f = phydro::calc_ftemp_inst_vcmax(T, 25, 25, phydro::FV_kumarathunge19);
		if (check(f, expected_kthunge[i]) == 1) return 1;
		//else cout << f << " " << expected_kthunge[i] << "\n";
	}


	vector<double> expected_kattge = {0.040847575351316, 0.046017359724082, 0.051795700285026, 0.0582487312178134, 0.0654491539195427, 0.0734768217863386, 0.0824193688230065, 0.0923728836618344, 0.103442629963708, 0.115743813203864, 0.129402392352124, 0.144555932710977, 0.161354492843864, 0.179961533642544, 0.200554830486965, 0.223327359219601, 0.248488112002471, 0.276262778272278, 0.306894196527899, 0.340642441293952, 0.377784351947971, 0.418612230524468, 0.463431327023272, 0.51255558469619, 0.56630092503207, 0.624975104297396, 0.688862866421516, 0.758204757720785, 0.833167587563494, 0.913804188861886, 1, 1.09140431637614, 1.18734526344886, 1.28673022008317, 1.38793828476989, 1.48871901654158, 1.58612200421803, 1.67649311003549, 1.75558107435925, 1.8187950336299, 1.86163065907732, 1.88023570760369, 1.87202293545211, 1.83618480449806, 1.77395470992013, 1.68851507562723};

	for (size_t i=0; i<x.size(); ++i){
		double T = x[i];
		double f = phydro::calc_ftemp_inst_vcmax(T, 25, 25, phydro::FV_kattge07);
		if (check(f, expected_kattge[i]) == 1) return 1;
		//else cout << f << " " << expected_kattge[i] << "\n";
	}


	vector<double> expected_leuning = {0.0422545674259526, 0.0477685130791527, 0.0539521062884503, 0.0608802302827141, 0.0686352852870266, 0.0773078033487707, 0.086997079263689, 0.0978118053568454, 0.109870692246877, 0.123303050153227, 0.138249295209992, 0.154861331900099, 0.173302745239268, 0.193748713688587, 0.21638552480677, 0.241409539186002, 0.269025403214519, 0.299443257115389, 0.332874621992407, 0.369526580643731, 0.409593797278993, 0.453247861677988, 0.500623411949719, 0.551800515391441, 0.606782910384858, 0.665471989023309, 0.727636896214704, 0.792881902131512, 0.860613313132307, 0.930009599949696, 1, 1.06925827415079, 1.13621903960226, 1.199123471471, 1.25609849835475, 1.3052685944709, 1.34489232546093, 1.37350837654143, 1.39007016755046, 1.39404674232061, 1.38547181410368, 1.36493213413634, 1.33349818800783, 1.29261101685598, 1.24394559749366, 1.18927232768837};

	for (size_t i=0; i<x.size(); ++i){
		double T = x[i];
		double f = phydro::calc_ftemp_inst_vcmax(T, 25, 25, phydro::FV_leuning02);
		if (check(f, expected_leuning[i]) == 1) return 1;
		//else cout << f << " " << expected_leuning[i] << "\n";
	}

	return 0;

}

